# Copyright (c) 2022 Arista Networks, Inc.  All rights reserved.
# Arista Networks, Inc. Confidential and Proprietary.

images:
  build-floor:
    units:
    - image: code.arista.io/infra/barney/barnzilla%base
    - image: code.arista.io/infra/barney/barnzilla%network
    - image: code.arista.io/infra/barney/barnzilla%rpms/yum
    - image: code.arista.io/infra/barney/barnzilla%rpms/yum-utils
    - image: code.arista.io/infra/barney/barnzilla%rpms/wget/fakeroot/sudo/EosImage/EosImageBuildUtils/EosUtils/EosSwimUtils
    - image: code.arista.io/infra/barney/barnzilla%rpms/rpm-build
    - image: code.arista.io/infra/barney/barnzilla%rpmdb
    - image: code.arista.io/infra/barney/barnzilla%rpms/jq
    - image: code.arista.io/infra/barney/barnzilla%rpms/bash

  mfw_pkg/backup-scripts:
    units:
    - floor: code.arista.io/mfw/build%toolchain
      sources:
        - code.arista.io/mfw/build
        - github.com/untangle/openwrt
        - github.com/untangle/mfw_feeds

      build: | 
        set -e
        # copy build%toolchain's staging_dir into our source tree
        cp -a /mfw-toolchain/staging_dir /src/github.com/untangle/openwrt/
        # use barney-supplied feeds instead of fetching from github
        perl -i -pe 's|^src-git mfw .+|src-link mfw /src/github.com/untangle/mfw_feeds|' /src/code.arista.io/mfw/build/feeds.conf.mfw
        # barney sets DESTDIR to /dest, but this really confuses openwrt
        unset DESTDIR
        # build our package
        cd /src/github.com/untangle/openwrt
        /src/code.arista.io/mfw/build/build.sh -f /src -t package/feeds/mfw/backup-scripts/compile
        # copy resulting packages to destination image
        mkdir -p /dest/mfw-packages/backup-scripts
        cp bin/packages/x86_64/*/* /dest/mfw-packages/backup-scripts

  internal/test/mfw_pkg/backup-scripts:
    units:
    - image: code.arista.io/mfw/build%world
    - image: .%mfw_pkg/backup-scripts
    entry:
      mutables:
        - /usr

  test/mfw_pkg/backup-scripts:
    units:
    - floor: .%internal/test/mfw_pkg/backup-scripts
      build: |
        mkdir /var/lock
        opkg install /mfw-packages/*/*

  mfw_pkg/crash-collector:
    units:
    - floor: code.arista.io/mfw/build%toolchain
      sources:
        - code.arista.io/mfw/build
        - github.com/untangle/openwrt
        - github.com/untangle/mfw_feeds
      build: | 
        set -e
        # copy build%toolchain's staging_dir into our source tree
        cp -a /mfw-toolchain/staging_dir /src/github.com/untangle/openwrt/
        # use barney-supplied feeds instead of fetching from github
        perl -i -pe 's|^src-git mfw .+|src-link mfw /src/github.com/untangle/mfw_feeds|' /src/code.arista.io/mfw/build/feeds.conf.mfw
        # barney sets DESTDIR to /dest, but this really confuses openwrt
        unset DESTDIR
        # build our package
        cd /src/github.com/untangle/openwrt
        /src/code.arista.io/mfw/build/build.sh -f /src -t package/feeds/mfw/crash-collector/compile
        # copy resulting packages to destination image
        mkdir -p /dest/mfw-packages/crash-collector
        cp bin/packages/x86_64/*/* /dest/mfw-packages/crash-collector

  internal/test/mfw_pkg/crash-collector:
    units:
    - image: code.arista.io/mfw/build%world
    - image: .%mfw_pkg/crash-collector
    entry:
      mutables:
        - /usr

  test/mfw_pkg/crash-collector:
    units:
    - floor: .%internal/test/mfw_pkg/crash-collector
      build: |
        mkdir /var/lock
        opkg install /mfw-packages/*/*

  mfw_pkg/credentials:
    units:
    - floor: code.arista.io/mfw/build%toolchain
      sources:
        - code.arista.io/mfw/build
        - github.com/untangle/openwrt
        - github.com/untangle/mfw_feeds
      build: | 
        set -e
        # copy build%toolchain's staging_dir into our source tree
        cp -a /mfw-toolchain/staging_dir /src/github.com/untangle/openwrt/
        # use barney-supplied feeds instead of fetching from github
        perl -i -pe 's|^src-git mfw .+|src-link mfw /src/github.com/untangle/mfw_feeds|' /src/code.arista.io/mfw/build/feeds.conf.mfw
        # barney sets DESTDIR to /dest, but this really confuses openwrt
        unset DESTDIR
        # build our package
        cd /src/github.com/untangle/openwrt
        /src/code.arista.io/mfw/build/build.sh -f /src -t package/feeds/mfw/credentials/compile
        # copy resulting packages to destination image
        mkdir -p /dest/mfw-packages/credentials
        cp bin/packages/x86_64/*/* /dest/mfw-packages/credentials

  internal/test/mfw_pkg/credentials:
    units:
    - image: code.arista.io/mfw/build%world
    - image: .%mfw_pkg/credentials
    entry:
      mutables:
        - /usr

  test/mfw_pkg/credentials:
    units:
    - floor: .%internal/test/mfw_pkg/credentials
      build: |
        mkdir /var/lock
        opkg install /mfw-packages/*/*

  mfw_pkg/mfw-eu:
    units:
    - floor: code.arista.io/mfw/build%toolchain
      sources:
        - code.arista.io/mfw/build
        - github.com/untangle/openwrt
        - github.com/untangle/mfw_feeds
      build: | 
        set -e
        # copy build%toolchain's staging_dir into our source tree
        cp -a /mfw-toolchain/staging_dir /src/github.com/untangle/openwrt/
        # use barney-supplied feeds instead of fetching from github
        perl -i -pe 's|^src-git mfw .+|src-link mfw /src/github.com/untangle/mfw_feeds|' /src/code.arista.io/mfw/build/feeds.conf.mfw
        # barney sets DESTDIR to /dest, but this really confuses openwrt
        unset DESTDIR
        # build our package
        cd /src/github.com/untangle/openwrt
        /src/code.arista.io/mfw/build/build.sh -f /src -r eu -t package/feeds/mfw/mfw-eu/compile
        # copy resulting packages to destination image
        mkdir -p /dest/mfw-packages/mfw-eu
        cp bin/packages/x86_64/*/* /dest/mfw-packages/mfw-eu

  internal/test/mfw_pkg/mfw-eu:
    units:
    - image: code.arista.io/mfw/build%world
    - image: .%mfw_pkg/mfw-eu
    entry:
      mutables:
        - /usr

  test/mfw_pkg/mfw-eu:
    units:
    - floor: .%internal/test/mfw_pkg/mfw-eu
      build: |
        mkdir /var/lock
        opkg install /mfw-packages/*/*

  mfw_pkg/pyconnector:
    units:
    - floor: code.arista.io/mfw/build%toolchain
      sources:
        - code.arista.io/mfw/build
        - github.com/untangle/openwrt
        - github.com/untangle/mfw_feeds
      build: | 
        set -e
        # copy build%toolchain's staging_dir into our source tree
        cp -a /mfw-toolchain/staging_dir /src/github.com/untangle/openwrt/
        # use barney-supplied feeds instead of fetching from github
        perl -i -pe 's|^src-git mfw .+|src-link mfw /src/github.com/untangle/mfw_feeds|' /src/code.arista.io/mfw/build/feeds.conf.mfw
        # barney sets DESTDIR to /dest, but this really confuses openwrt
        unset DESTDIR
        # build our package
        cd /src/github.com/untangle/openwrt
        /src/code.arista.io/mfw/build/build.sh -f /src -t package/feeds/mfw/pyconnector/compile
        # copy resulting packages to destination image
        mkdir -p /dest/mfw-packages/pyconnector
        cp bin/packages/x86_64/*/* /dest/mfw-packages/pyconnector

  internal/test/mfw_pkg/pyconnector:
    units:
    - image: code.arista.io/mfw/build%world
    - image: .%mfw_pkg/pyconnector
    entry:
      mutables:
        - /usr

  test/mfw_pkg/pyconnector:
    units:
    - floor: .%internal/test/mfw_pkg/pyconnector
      build: |
        mkdir /var/lock
        opkg install /mfw-packages/*/*

  mfw_pkg/upgrade-scripts:
    units:
    - floor: code.arista.io/mfw/build%toolchain
      sources:
        - code.arista.io/mfw/build
        - github.com/untangle/openwrt
        - github.com/untangle/mfw_feeds
      build: | 
        set -e
        # copy build%toolchain's staging_dir into our source tree
        cp -a /mfw-toolchain/staging_dir /src/github.com/untangle/openwrt/
        # use barney-supplied feeds instead of fetching from github
        perl -i -pe 's|^src-git mfw .+|src-link mfw /src/github.com/untangle/mfw_feeds|' /src/code.arista.io/mfw/build/feeds.conf.mfw
        # barney sets DESTDIR to /dest, but this really confuses openwrt
        unset DESTDIR
        # build our package
        cd /src/github.com/untangle/openwrt
        /src/code.arista.io/mfw/build/build.sh -f /src -t package/feeds/mfw/upgrade-scripts/compile
        # copy resulting packages to destination image
        mkdir -p /dest/mfw-packages/upgrade-scripts
        cp bin/packages/x86_64/*/* /dest/mfw-packages/upgrade-scripts

  internal/test/mfw_pkg/upgrade-scripts:
    units:
    - image: code.arista.io/mfw/build%world
    - image: .%mfw_pkg/upgrade-scripts
    entry:
      mutables:
        - /usr

  test/mfw_pkg/upgrade-scripts:
    units:
    - floor: .%internal/test/mfw_pkg/upgrade-scripts
      build: |
        mkdir /var/lock
        opkg install /mfw-packages/*/*

  # Create the mfw-feeds RPM consisting of some basic scripts
  mfw_pkg/mfw-feeds-rpm:
    units:
    - floor: .%build-floor
      entry:
        mutables:
          - /var/lib
          - /var/tmp
      sources:
        - github.com/untangle/mfw_feeds
        - github.com/sivel/speedtest-cli
      build: |
        # Remove once barnzilla%base is fixed to no longer break rpmdb
        /usr/libexec/barnzilla/init-rpmdb-from-rpmcache

        MFWFEEDS_DIR="/src/github.com/untangle/mfw_feeds"
        MFWFEEDS_TARDIR="/dest/mfw-tardir/"
        RPMDIR="/dest/mfw-rpms"

        # Build rpm build root
        mkdir -p /tmp/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS,BUILDROOT}
        mkdir -p $MFWFEEDS_TARDIR/{geoip-database,speedtest-cli}
        mkdir -p $RPMDIR

        cp -r $MFWFEEDS_DIR/{wan-manager,upgrade-scripts,backup-scripts,pyconnector} $MFWFEEDS_TARDIR
        cd $MFWFEEDS_TARDIR 
        wget -O - https://downloads.untangle.com/download.php?resource=geoipCountry | \
        tar -xz --strip-components=1 -C geoip-database/

        # Patch speedtest-cli 
        cd /src/github.com/sivel/speedtest-cli
        patch -p1 < $MFWFEEDS_DIR/speedtest-cli/patches/0001-Switch-to-python3.patch \
         && patch -p1 < $MFWFEEDS_DIR/speedtest-cli/patches/0002-Add-simple-json-output-option.patch
        cp speedtest.py $MFWFEEDS_TARDIR/speedtest-cli

        # Bundle stuffs in MFWFEEDS_TARDIR to a single source tar.gz for rpm spec file
        cd $MFWFEEDS_TARDIR && tar -czvf /tmp/rpmbuild/SOURCES/mfw_feeds.tar.gz --transform 's|^|mfw_feeds/|' *

        # build the rpm and copy it to the right directory
        rpmbuild -v --define '_topdir /tmp/rpmbuild' -bb $MFWFEEDS_DIR/mfw-feeds.spec
        cp -r /tmp/rpmbuild/RPMS/noarch/* $RPMDIR
        rm -rf $MFWFEEDS_TARDIR
        # The current working directory is saved in future images
        cd /

  # Generate an image of floor + RPMs before testing
  testImage/mfw_pkg/mfw-feeds-rpm:
    units:
    - image: .%mfw_pkg/mfw-feeds-rpm
    - image: .%build-floor
    - image: code.arista.io/infra/barney/barnzilla%rpmdb

  # Install the generated RPM and check if it was successfully installed
  test/mfw_pkg/mfw-feeds-rpm:
    units:
    - floor: .%testImage/mfw_pkg/mfw-feeds-rpm
      entry:
        mutables:
          - /var/lib
          - /var/tmp
      build: |
        # Remove once barnzilla%base is fixed to no longer break rpmdb
        /usr/libexec/barnzilla/init-rpmdb-from-rpmcache

        sudo yum --releasever 7 -y --skip-broken --installroot=/dest/testRoot install /mfw-rpms/*.rpm
        echo "mfw-feeds-rpm Installed Files" > /dest/testResults

        ls /dest/testRoot/usr/bin/wan-manager && echo "/usr/bin/wan-manager" >> /dest/testResults
        ls /dest/testRoot/usr/bin/upgrade.sh && echo "/usr/bin/upgrade.sh" >> /dest/testResults
        ls /dest/testRoot/usr/bin/speedtest-cli && echo "/usr/bin/speedtest-cli" >> /dest/testResults
        ls /dest/testRoot/usr/bin/upload-backup.sh && echo "/usr/bin/upload-backup.sh" >> /dest/testResults
        ls /dest/testRoot/usr/share/geoip/GeoLite2-Country.mmdb && echo "/usr/share/geoip/GeoLite2-Country.mmdb" >> /dest/testResults

  mfw_pkg/wan-manager:
    units:
    - floor: code.arista.io/mfw/build%toolchain
      sources:
        - code.arista.io/mfw/build
        - github.com/untangle/openwrt
        - github.com/untangle/mfw_feeds
      build: |
        set -e
        # copy build%toolchain's staging_dir into our source tree
        cp -a /mfw-toolchain/staging_dir /src/github.com/untangle/openwrt/
        # use barney-supplied feeds instead of fetching from github
        perl -i -pe 's|^src-git mfw .+|src-link mfw /src/github.com/untangle/mfw_feeds|' /src/code.arista.io/mfw/build/feeds.conf.mfw
        # barney sets DESTDIR to /dest, but this really confuses openwrt
        unset DESTDIR
        # avoid rebuilding wan-utils, as it's already built from its own
        # repository; removing the dependency is a bit nasty, but we
        # consider it acceptable still because for MFW we install all
        # the packages together at image creation time, and we don't
        # have to support further upgrades
        perl -i -pe 's/ .?wan-utils//' /src/github.com/untangle/mfw_feeds/wan-manager/Makefile
        # build our package
        cd /src/github.com/untangle/openwrt
        /src/code.arista.io/mfw/build/build.sh -f /src -t package/feeds/mfw/wan-manager/compile
        # copy resulting packages to destination image
        mkdir -p /dest/mfw-packages/wan-manager
        cp bin/packages/x86_64/*/* /dest/mfw-packages/wan-manager

  ## Commented-out for now because it needs kmod-nft, which is only
  ## built by untangle/packetd
  # internal/test/mfw_pkg/wan-manager:
  #   units:
  #   - image: code.arista.io/mfw/build%world
  #   - image: .%mfw_pkg/wan-manager
  #   entry:
  #     mutables:
  #       - /usr
  #
  # test/mfw_pkg/wan-manager:
  #   units:
  #   - floor: .%internal/test/mfw_pkg/wan-manager
  #     build: |
  #       mkdir /var/lock
  #       opkg install /mfw-packages/*/*
