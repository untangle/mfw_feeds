#!/bin/sh /etc/rc.common
# Copyright (C) 2006-2011 OpenWrt.org

START=99
STOP=99

USE_PROCD=1

get_translated_host()
{
    # Lookup host as a uri and return just host
    local __return_host=$1
    local uri=$2

    if case $uri in https*) false;; esac; then
        # Only host - add https:// for lookup
        uri="https://"$uri"/"
    fi
    translated_url=$(wget -qO- "http://127.0.0.1/api/uri/geturiwithpath/uri=$uri")
    if [ "translated_url" != "" ] ; then
        host=$translated_url
    fi
    # Strip leading https://
    host=${host##https://}
    # Strip trailing path
    host=${host%%/*}

	eval "$__return_host=$host"
}

# Wait for restd to come up to prevent a race condition where
# pyconnector starts first, but sends incomplete information 
# since the api enpoints from restd couldn't send back system status info
wait_for_restd_start() {
    local max_retries=20
    local retry_delay=1
    local url="http://localhost/ping"

    for attempt in $(seq 1 $max_retries); do
        response=$(curl -s "$url")
        if [ $? -eq 0 ]; then
            logger -t pyconnector "restd is up. Starting pyconnector"
            return
        else
            logger -t pyconnector "Attempt $attempt to reach restd failed."
            sleep "$retry_delay"
        fi
    done

    logger -t pyconnector "restd failed to start after $((max_retries * retry_delay)) seconds. Continuing..."
}


start_service() {
    CLOUD=`jq '.system.cloud' /etc/config/current.json`
    # If there are no cloud settings, just enable cloud access
    # This is for backward compatibility
    if [ -z "$CLOUD" ] ; then
        ENABLED="true"
    else
        ENABLED=`jq '.system.cloud.enabled' /etc/config/current.json`
    fi

    if [ $ENABLED = "true" ] ; then
        wait_for_restd_start

        SERVERS=`jq '.system.cloud.cloudServers[]' /etc/config/current.json`

        for server in $SERVERS ; do
            host=""
            logger -t pyconnector "Checking URI translation for $server..."
            get_translated_host host $server
            if [ -z $host ] ; then
                logger -t pyconnector "Unable to find $server in URI translations, assuming $server"
                host=$server
            fi

            procd_open_instance
	        procd_set_param command /usr/bin/pyconnector -s $host
	        procd_set_param stdout 1
	        procd_set_param stderr 1

            # restart indefinitely if crashed, 120 seconds between attempts
            procd_set_param respawn 3600 120 0
	        procd_close_instance
        done
    fi
}
